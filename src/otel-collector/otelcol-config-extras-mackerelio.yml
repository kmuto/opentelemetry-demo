# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

# extra settings to be merged into OpenTelemetry Collector configuration
# do not delete this file

## Example configuration for sending data to your own OTLP HTTP backend
## Note: the spanmetrics exporter must be included in the exporters array
## if overriding the traces pipeline.
##
#  exporters:
#    otlphttp/example:
#      endpoint: <your-endpoint-url>
#
#  service:
#    pipelines:
#      traces:
#        exporters: [spanmetrics, otlphttp/example]
# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

# extra settings to be merged into OpenTelemetry Collector configuration
# do not delete this file

## Example configuration for sending data to your own OTLP HTTP backend
## Note: the spanmetrics exporter must be included in the exporters array
## if overriding the traces pipeline.
##
#  exporters:
#    otlphttp/example:
#      endpoint: <your-endpoint-url>
#
#  service:
#    pipelines:
#      traces:
#        exporters: [spanmetrics, otlphttp/example]
exporters:
  otlphttp/vaxila:
    endpoint: "https://otlp-vaxila.mackerelio.com"
    compression: gzip
    headers:
      Accept: "*/*"
      "Mackerel-Api-Key": ${env:MACKEREL_APIKEY}
  otlp/mackerel:
    endpoint: otlp.mackerelio.com:4317
    compression: gzip
    headers:
      "Mackerel-Api-Key": ${env:MACKEREL_APIKEY}

processors:
  batch:
    send_batch_size: 5000
    send_batch_max_size: 5000
  resource/namespace:
    attributes:
    - key: service.namespace
      value: "kmuto/opentelemetry-demo"
      action: upsert

service:
  pipelines:
    traces:
      exporters: [otlp, debug, spanmetrics, otlphttp/vaxila]
      processors: [resource/namespace, transform, batch]
    metrics:
      processors: [resource/namespace, batch]
      exporters: [otlphttp/prometheus, debug, otlp/mackerel]
